import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

/**
 * Elisa Idrobo
 * CSC 380-AI
 * Handwritten Digit Recognition
 * A neural network to classify an image of a digit as 0-9
 * It has a single layer of 10 perceptrons and uses a sigmoid activation function
 * This class can be used to train or test a neural network
 */
public class NeuralNetwork {

	double[][] weights;//10 perceptrons and 784+1 inputs
	
	/*
	 * Constructor. Creates a neural network with weights initialized to zero
	 * Parameters:
	 * numWeights: the number of inputs + 1(bias weight)
	 */
	public NeuralNetwork(int numWeights){
		int numPerceptrons = 10;
		weights = new double[numPerceptrons][numWeights];
		for(int i = 0; i < numPerceptrons; i++){
			for(int j = 0; j < numWeights; j++){
				weights[i][j] = 0.0;
			}
		}
	}
	/*
	 * Constructor. loads a neural network using weights in a file
	 * Parameters:
	*	networkFilename: the filepath for the file containing the weights of the network 
	**/
	public NeuralNetwork(String networkFilename){
		try {
			BufferedReader br = new BufferedReader(new FileReader(networkFilename));
			int numPerceptrons = Integer.parseInt(br.readLine());
			if(numPerceptrons != 10){
				System.err.println("network weights file is in wrong format");
				System.exit(1);
			}
			int numWeights = Integer.parseInt(br.readLine());
			weights = new double[numPerceptrons][numWeights];
			//init weights with the weights from file
			for(int i = 0; i < numPerceptrons; i++){
					String str = br.readLine();
					String[] temp = str.split("\\s*,\\s*");//delimiter: ','
					for(int t = 0; t < temp.length; t++){
						weights[i][t] = Double.parseDouble(temp[t]);
					}	
			}
			br.close();
		} catch (NumberFormatException | IOException e) {
			System.err.println("network weights file not found or is in wrong format");
			System.exit(1);
		}
	}
	
	/*
	 * Parameter:
	 * input- the array of the input image in the format generated by Image.java. 
	 * 	The last element should be -1 corresponding to the bias weight
	 * Returns classification of the input image as a digit between 0-9
	 */
	public int h(double[] input){
		double[] output = new double[10];
		for(int node = 0; node < weights.length; node++){
			double sum = weightedSum(input, node);
			output[node] = activationFunction(sum);
		}
		return classify(output);
	}
	
	/*
	 * Activation function is a sigmoid function
	 *  g(x) = 1/(1+ e^-x)
	 *  Paramter: x = the weighted sum
	 *  Returns g(x)
	 */
	protected double activationFunction(double input){
		return 1.0 / (1.0 + Math.pow(Math.E, -1* input));
	}
	
	/*
	 * Parameters:
	 * input- the input image as an array of values
	 * node- which perceptron's weights to use
	 * returns weighted sum(weights*corresponding inputs)
	 */
	protected double weightedSum(double[] input, int node){
		double sum =0.0;
		for(int in = 0; in < weights[node].length-1; in++){
			sum += weights[node][in] * input[in];
		}
		return sum;
	}
	/*
	 * Parameter- the outputs of the perceptrons
	 * return the digit the network classifies the input as. 
	 * The index of the perceptron with the highest output is taken as the classification. 
	 */
	protected int classify(double[] perceptronOutput){
		int index=0; 
		for(int i =1; i < perceptronOutput.length; i++){
			if(perceptronOutput[i] > perceptronOutput[index]){
				index = i;
			}
		}
		return index;
	}
	/*
	 * Calculate error.
	 * Parameters
	 * correctClassifcation: should equal 1 if label matches index of perceptron, 0 otherwise.
	 * output: g(x) of the perceptron
	 * returns correctClassification - output
	 */
	protected double error(int correctClassification, double output){
		double err = correctClassification - output;
		return err;
	}
	/*
	 *  Sets the weight of the specified weight to a new value
	 * Parameters:
	 * perceptronNum- the number of the perceptron
	 * inputNumber- the index of the weight
	 * newWeight- the new value to set the weight to
	 */
	protected void setWeight(int perceptronNum, int inputNumber, double newWeight){
		weights[perceptronNum][inputNumber] = newWeight;
	}
	/*
	 *  returns the value of the specified weight
	 * Parameters:
	 * perceptronNum- the number of the perceptron
	 * inputNumber- the index of the weight
	 */
	protected double getWeight(int perceptronNum, int inputNumber){
		return weights[perceptronNum][inputNumber];
	}
	
	/*
	 * write weights as .CSV file (each weight separated by a comma, each line a perceptron)
	 * Parameter:
	 * networkFilename- the prefix of the filename
	 */
	public void printToFile(String networkFilename){
		try {
			BufferedWriter bw = new BufferedWriter(new FileWriter(networkFilename+".csv"));
			System.out.println("Writing weights to "+networkFilename+".csv");
			//first two lines are the number of perceptrons and the number of weights
			bw.write(weights.length+"\n"+weights[0].length+"\n");
			//write the weights to the file
			for(int node = 0; node < weights.length; node++){
				for(int in = 0; in < weights[0].length-1; in++){
					bw.write(weights[node][in]+ ", ");
				}
				bw.write(weights[node][weights[0].length-1]+ "\n");
			}
			bw.close();
		} catch (IOException e) {
			System.err.println("writing weights to file failed.\n"+networkFilename+".csv File may have been open in another application.");
			System.exit(1);
		}
	}
	
}
